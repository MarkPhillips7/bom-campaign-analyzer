System.register([], function (_export) {
  "use strict";

  var JsonServiceClient, is, S, A, O, Path, Urn, Dto;
  return {
    setters: [],
    execute: function () {
      JsonServiceClient = function JsonServiceClient(baseUri) {
        this.baseSyncReplyUri = Path.combine(baseUri, "json/reply");
        this.baseAsyncOneWayUri = Path.combine(baseUri, "json/oneway");
      };

      _export("JsonServiceClient", JsonServiceClient);

      JsonServiceClient.prototype.send = function (webMethod, request, onSuccess, onError, ajaxOptions, isOneWay) {
        var startCallTime = new Date();
        var requestUrl = Path.combine(isOneWay ? this.baseAsyncOneWayUri : this.baseSyncReplyUri, webMethod);
        var id = JsonServiceClient.id++;

        var options = {
          type: "GET",
          url: requestUrl,
          data: request,
          dataType: "json",
          success: function success(response) {
            var endCallTime = new Date();
            var callDuration = endCallTime.getTime() - startCallTime.getTime();
            if (!response) {
              if (onSuccess) onSuccess(null);
              return;
            }

            var status = JsonServiceClient.parseResponseStatus_(response.ResponseStatus);
            if (status.isSuccess) {
              if (onSuccess) onSuccess(response);
              JsonServiceClient.onSuccess({
                id: id, webMethod: webMethod, request: request,
                response: response, durationMs: callDuration
              });
            } else {
              if (onError) onError(status);
              JsonServiceClient.onError({
                id: id, webMethod: webMethod, request: request,
                error: status, durationMs: callDuration
              });
            }
          },
          error: function error(xhr, desc, exceptionobj) {
            var endCallTime = new Date();
            var callDuration = endCallTime.getTime() - startCallTime.getTime();

            try {
              var response = xhr.responseText;
              try {
                response = JsonServiceClient.parseJSON(response);
              } catch (e) {}
              if (onError) onError(response);
            } catch (e) {}
            JsonServiceClient.onError({
              id: id, webMethod: webMethod, request: request,
              error: xhr.responseText, durationMs: callDuration
            });
          }
        };

        for (var k in ajaxOptions) options[k] = ajaxOptions[k];

        var ajax = JsonServiceClient.ajax(options);
      };

      JsonServiceClient.prototype.getFromService = function (webMethod, request, onSuccess, onError) {
        var options = document.all ? { cache: false } : null;
        this.send(webMethod, request, onSuccess, onError, options);
      };

      JsonServiceClient.prototype.postFormDataToService = function (webMethod, request, onSuccess, onError) {
        this.send(webMethod, request, onSuccess, onError, { type: "POST", processData: false, contentType: false }, true);
      };

      JsonServiceClient.prototype.postToService = function (webMethod, request, onSuccess, onError) {
        var jsonRequest = JsonServiceClient.toJSON(request);
        this.send(webMethod, jsonRequest, onSuccess, onError, { type: "POST", processData: false, contentType: "application/json; charset=utf-8" });
      };

      JsonServiceClient.prototype.putToService = function (webMethod, request, onSuccess, onError) {
        var jsonRequest = JsonServiceClient.toJSON(request);
        this.send(webMethod, jsonRequest, onSuccess, onError, { type: "PUT", processData: false, contentType: "application/json; charset=utf-8" });
      };

      JsonServiceClient.prototype.deleteFromService = function (webMethod, request, onSuccess, onError) {
        var jsonRequest = JsonServiceClient.toJSON(request);
        this.send(webMethod, jsonRequest, onSuccess, onError, { type: "DELETE", processData: false, contentType: "application/json; charset=utf-8" });
      };

      JsonServiceClient.id = 0;
      JsonServiceClient.onError = function () {};
      JsonServiceClient.onSuccess = function () {};
      JsonServiceClient.parseResponseStatus_ = function (status) {
        if (!status) return { isSuccess: true };

        var result = {
          isSuccess: status.ErrorCode === undefined || status.ErrorCode === null,
          errorCode: status.ErrorCode,
          message: status.Message,
          errorMessage: status.ErrorMessage,
          stackTrace: status.StackTrace,
          fieldErrors: [],
          fieldErrorMap: {}
        };

        if (status.FieldErrors) {
          for (var i = 0, len = status.FieldErrors.length; i < len; i++) {
            var err = status.FieldErrors[i];
            var error = { errorCode: err.ErrorCode, fieldName: err.FieldName, errorMessage: err.ErrorMessage || '' };
            result.fieldErrors.push(error);

            if (error.fieldName) {
              result.fieldErrorMap[error.fieldName] = error;
            }
          }
        }
        return result;
      };
      JsonServiceClient.toJsonDate = function (date) {
        var jsDate = is.Date(date) ? date : new Date(date);
      };

      JsonServiceClient.parseJSON = function (json) {
        if (typeof JSON == 'object' && JSON.parse) return JSON.parse(json);
        if ($ && $.parseJSON) return $.parseJSON(json);
        if (goog && goog.json) return goog.json.parse(json);
        throw "no json parser found";
      };
      JsonServiceClient.toJSON = function (o) {
        if (typeof JSON == 'object' && JSON.stringify) return JSON.stringify(o);
        if ($ && $.toJSON) return $.toJSON(o);
        if (goog && goog.json) return goog.json.serialize(o);
        throw "no json serializer found";
      };
      JsonServiceClient.ajax = function (ajaxOptions) {
        if ($ && $.ajax) return $.ajax(ajaxOptions);
        throw "no ajax provider found";
      };

      is = {
        Null: function Null(a) {
          return a === null;
        },
        Undefined: function Undefined(a) {
          return a === undefined;
        },
        Empty: function Empty(a) {
          return a === null || a === undefined || a === "";
        },
        Function: function Function(a) {
          return typeof a === 'function' ? a.constructor.toString().match(/Function/) !== null : false;
        },
        String: function String(a) {
          if (a === null || a === undefined || a.type) return false;
          return typeof a === 'string' ? true : typeof a === 'object' ? a.constructor.toString().match(/string/i) !== null : false;
        },
        Array: function Array(a) {
          if (is.Empty(a) || a.type) return false;
          return typeof a === 'object' ? a.constructor.toString().match(/array/i) !== null || a.length !== undefined : false;
        },
        Boolean: function Boolean(a) {
          if (is.Empty(a) || a.type) return false;
          return typeof a === 'boolean' ? true : typeof a === 'object' ? a.constructor.toString().match(/boolean/i) !== null : false;
        },
        Date: function Date(a) {
          if (is.Empty(a) || a.type) return false;
          return typeof a === 'date' ? true : typeof a === 'object' ? a.constructor.toString().match(/date/i) !== null : false;
        },
        Number: function Number(a) {
          if (is.Empty(a) || a.type) return false;
          return typeof a === 'number' ? true : typeof a === 'object' ? a.constructor.toString().match(/Number/) !== null : false;
        },
        ValueType: function ValueType(a) {
          if (is.Empty(a) || a.type) return false;
          return is.String(a) || is.Date(a) || is.Number(a) || is.Boolean(a);
        }
      };
      S = {};

      S.rtrim = function (str, chars) {
        chars = chars || "\\s";
        return str.replace(new RegExp("[" + chars + "]+$", "g"), "");
      };
      S.toString = function () {
        if (arguments.length == 0 || !arguments[0]) return null;

        var s = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];

          if (s) s += "/";

          if (is.String(arg)) s += arg;else if (is.ValueType(arg)) s += arg.toString();else if (is.Array(arg)) s += '[' + A.join(arg, ",") + ']';else {
            var o = "";
            for (var name in arg) {
              if (o) o += ",";
              o += name + ":" + S.safeString(arg[name]);
            }
            s += '{' + o + '}';
          }
        }
        return s;
      };
      S.safeString = function (str) {
        if (!str) return str;
        if (S.containsAny(str, ['[', ']', '{', '}', ','])) {
          return '"' + str + '"';
        }
        return str;
      };
      S.containsAny = function (str, tests) {
        if (!is.String(str)) return;
        for (var i = 0, len = tests.length; i < len; i++) {
          if (str.indexOf(tests[i]) != -1) return true;
        }
        return false;
      };
      S.startsWith = function (text, startsWith) {
        if (!text || !startsWith) return false;
        return text.lastIndexOf(startsWith, 0) == 0;
      };
      S.pad = function (text, padLen, padChar, rpad) {
        var padChar = padChar || (rpad ? " " : "0");
        text = text.toString();
        while (text.length < padLen) {
          text = rpad ? text + padChar : padChar + text;
        }
        return text;
      };
      S.padLeft = function (text, padLen, padChar) {
        return S.pad(text, padLen, padChar, false);
      };
      S.padRight = function (text, padLen, padChar) {
        return S.pad(text, padLen, padChar, true);
      };
      S.lpad = S.padLeft;
      S.rpad = S.padRight;

      A = {};

      A.each = function (array, fn) {
        if (!array) return;
        for (var i = 0, len = array.length; i < len; i++) fn(array[i]);
      };
      A.convertAll = function (array, convertFn) {
        var to = [];
        for (var i = 0, len = array.length; i < len; i++) to[i] = convertFn(array[i]);
        return to;
      };
      A.join = function (array, on) {
        var s = "";
        on = on || ",";
        for (var i = 0, len = array.length; i < len; i++) {
          if (s) s += on;
          s += array[i];
        }
        return s;
      };
      A.toTable = function (array, tableFormatFns) {
        tableFormatFns = tableFormatFns || {};
        var cols = [],
            sb = [];
        for (var i = 0, len = array.length; i < len; i++) {
          var obj = array[i];
          if (!obj) continue;
          if (i == 0) {
            sb.push("<table><thead><tr>");
            for (var k in obj) {
              cols.push(k);
              sb.push("<th>" + k + "</th>");
            }
            sb.push("</tr></thead><tbody>");
          }
          sb.push("<tr>");
          for (var j = 0, colsLen = cols.length; j < colsLen; j++) {
            var k = cols[j];
            var data = tableFormatFns[k] ? tableFormatFns[k](obj[k]) : Dto.formatValue(obj[k]);

            sb.push("<td>" + data + "</td>");
          }
          sb.push("</tr>");
        }
        sb.push("</tbody></table>");
        return sb.join('');
      };

      O = {};

      O.keys = function (obj) {
        var keys = [];
        for (var key in obj) keys.push(key);
        return keys;
      };

      Path = {};

      Path.combine = function () {
        var paths = "";
        for (var i = 0, len = arguments.length; i < len; i++) {
          if (paths.length > 0) paths += "/";

          paths += S.rtrim(arguments[i], '/');
        }
        return paths;
      };
      Path.getFirstArg = function (path) {
        if (!path) return null;
        return path.split('/')[0];
      };
      Path.getFirstValue = function (path) {
        if (!path || path.indexOf('/') == -1) return null;
        return path.substr(path.indexOf('/') + 1);
      };
      Path.getArgs = function (path) {
        if (!path) return null;
        return path.split('/');
      };

      Urn = {};

      Urn.toId = function (urn) {
        return urn.replace(/:/g, '_');
      };
      Urn.getIdValue = function (urn) {
        return urn.split(':')[2];
      };
      Urn.fromId = function (urn) {
        return urn.replace(/_/g, ':');
      };

      Dto = {};

      Dto.toArray = function (array) {
        return is.Array(array) ? S.toString(array) : "[" + S.toString(array) + "]";
      };
      Dto.toUtcDate = function (date) {
        return date.getUTCFullYear() + '-' + S.lpad(date.getUTCMonth() + 1, 2) + '-' + S.lpad(date.getUTCDate(), 2) + 'T' + S.lpad(date.getUTCHours(), 2) + ':' + S.lpad(date.getUTCMinutes(), 2) + ':' + S.lpad(date.getUTCSeconds(), 2) + 'Z';
      };
      Dto.isJsonDate = function (str) {
        if (!is.String(str)) return false;
        return S.startsWith(str, Dto.WcfDatePrefix);
      };
      Dto.WcfDatePrefix = "\/Date(";
      Dto.toJsonDate = function (date) {
        date = Dto.parseJsonDate(date);
        return Dto.WcfDatePrefix + date.getTime() + "+0000)\/";
      };
      Dto.parseJsonDate = function (date) {
        return is.Date(date) ? date : S.startsWith(date, Dto.WcfDatePrefix) ? new Date(parseInt(date.substring(Dto.WcfDatePrefix.length, date.length - 2))) : new Date(date);
      };
      Dto.formatDate = function (date) {
        date = Dto.parseJsonDate(date);
        return date.getUTCFullYear() + '/' + S.lpad(date.getUTCMonth() + 1, 2) + '/' + S.lpad(date.getUTCDate(), 2);
      };
      Dto.formatValue = function (value) {
        if (Dto.isJsonDate(value)) return Dto.formatDate(value);
        if (is.Empty(value)) return "";
        return value;
      };
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYXRpbnVtL0pzb25TZXJ2aWNlQ2xpZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztNQUVXLGlCQUFpQixFQW9KeEIsRUFBRSxFQXdDRixDQUFDLEVBa0VELENBQUMsRUFpREQsQ0FBQyxFQVFELElBQUksRUF3QkosR0FBRyxFQVdILEdBQUc7Ozs7QUExVkksdUJBQWlCLEdBQUMsU0FBbEIsaUJBQWlCLENBQVUsT0FBTyxFQUFFO0FBQzdDLFlBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUM1RCxZQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7T0FDaEU7Ozs7QUFDRCx1QkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7QUFDMUcsWUFBSSxhQUFhLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUMvQixZQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3JHLFlBQUksRUFBRSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDOztBQUVoQyxZQUFJLE9BQU8sR0FBRztBQUNaLGNBQUksRUFBRSxLQUFLO0FBQ1gsYUFBRyxFQUFFLFVBQVU7QUFDZixjQUFJLEVBQUUsT0FBTztBQUNiLGtCQUFRLEVBQUUsTUFBTTtBQUNoQixpQkFBTyxFQUFFLGlCQUFVLFFBQVEsRUFBRTtBQUMzQixnQkFBSSxXQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUM3QixnQkFBSSxZQUFZLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFH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L0IsZUFBTyxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQ3RCLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQ3ZDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztPQUMxQyxDQUFDO0FBQ0YsU0FBRyxDQUFDLFdBQVcsR0FBRyxVQUFVLEtBQUssRUFBRTtBQUNqQyxZQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELFlBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUMvQixlQUFPLEtBQUssQ0FBQztPQUNkLENBQUMiLCJmaWxlIjoicGxhdGludW0vSnNvblNlcnZpY2VDbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGNvbnN0cnVjdG9yICovXG5cbmV4cG9ydCB2YXIgSnNvblNlcnZpY2VDbGllbnQ9ZnVuY3Rpb24oYmFzZVVyaSkge1xuICB0aGlzLmJhc2VTeW5jUmVwbHlVcmkgPSBQYXRoLmNvbWJpbmUoYmFzZVVyaSwgXCJqc29uL3JlcGx5XCIpO1xuICB0aGlzLmJhc2VBc3luY09uZVdheVVyaSA9IFBhdGguY29tYmluZShiYXNlVXJpLCBcImpzb24vb25ld2F5XCIpO1xufVxuSnNvblNlcnZpY2VDbGllbnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAod2ViTWV0aG9kLCByZXF1ZXN0LCBvblN1Y2Nlc3MsIG9uRXJyb3IsIGFqYXhPcHRpb25zLCBpc09uZVdheSkge1xuICB2YXIgc3RhcnRDYWxsVGltZSA9IG5ldyBEYXRlKCk7XG4gIHZhciByZXF1ZXN0VXJsID0gUGF0aC5jb21iaW5lKGlzT25lV2F5ID8gdGhpcy5iYXNlQXN5bmNPbmVXYXlVcmkgOiB0aGlzLmJhc2VTeW5jUmVwbHlVcmksIHdlYk1ldGhvZCk7XG4gIHZhciBpZCA9IEpzb25TZXJ2aWNlQ2xpZW50LmlkKys7XG5cbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgdHlwZTogXCJHRVRcIixcbiAgICB1cmw6IHJlcXVlc3RVcmwsXG4gICAgZGF0YTogcmVxdWVzdCxcbiAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgZW5kQ2FsbFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgdmFyIGNhbGxEdXJhdGlvbiA9IGVuZENhbGxUaW1lLmdldFRpbWUoKSAtIHN0YXJ0Q2FsbFRpbWUuZ2V0VGltZSgpO1xuICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICBpZiAob25TdWNjZXNzKSBvblN1Y2Nlc3MobnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXR1cyA9IEpzb25TZXJ2aWNlQ2xpZW50LnBhcnNlUmVzcG9uc2VTdGF0dXNfKHJlc3BvbnNlLlJlc3BvbnNlU3RhdHVzKTtcbiAgICAgIGlmIChzdGF0dXMuaXNTdWNjZXNzKSB7XG4gICAgICAgIGlmIChvblN1Y2Nlc3MpIG9uU3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgIEpzb25TZXJ2aWNlQ2xpZW50Lm9uU3VjY2Vzcyh7XG4gICAgICAgICAgaWQ6IGlkLCB3ZWJNZXRob2Q6IHdlYk1ldGhvZCwgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2UsIGR1cmF0aW9uTXM6IGNhbGxEdXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAob25FcnJvcikgb25FcnJvcihzdGF0dXMpO1xuICAgICAgICBKc29uU2VydmljZUNsaWVudC5vbkVycm9yKHtcbiAgICAgICAgICBpZDogaWQsIHdlYk1ldGhvZDogd2ViTWV0aG9kLCByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICAgIGVycm9yOiBzdGF0dXMsIGR1cmF0aW9uTXM6IGNhbGxEdXJhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBkZXNjLCBleGNlcHRpb25vYmopIHtcbiAgICAgIHZhciBlbmRDYWxsVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICB2YXIgY2FsbER1cmF0aW9uID0gZW5kQ2FsbFRpbWUuZ2V0VGltZSgpIC0gc3RhcnRDYWxsVGltZS5nZXRUaW1lKCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXNwb25zZSA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIHRyeSB7IHJlc3BvbnNlID0gSnNvblNlcnZpY2VDbGllbnQucGFyc2VKU09OKHJlc3BvbnNlKTsgfSBjYXRjaCAoZSkgeyB9XG4gICAgICAgIGlmIChvbkVycm9yKSBvbkVycm9yKHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgIEpzb25TZXJ2aWNlQ2xpZW50Lm9uRXJyb3Ioe1xuICAgICAgICBpZDogaWQsIHdlYk1ldGhvZDogd2ViTWV0aG9kLCByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICBlcnJvcjogeGhyLnJlc3BvbnNlVGV4dCwgZHVyYXRpb25NczogY2FsbER1cmF0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgayBpbiBhamF4T3B0aW9ucykgb3B0aW9uc1trXSA9IGFqYXhPcHRpb25zW2tdO1xuXG4gIHZhciBhamF4ID0gSnNvblNlcnZpY2VDbGllbnQuYWpheChvcHRpb25zKTtcbn07XG5cbi8vU2VuZHMgYSBIVFRQICdHRVQnIHJlcXVlc3Qgb24gdGhlIFF1ZXJ5U3RyaW5nXG5Kc29uU2VydmljZUNsaWVudC5wcm90b3R5cGUuZ2V0RnJvbVNlcnZpY2UgPSBmdW5jdGlvbiAod2ViTWV0aG9kLCByZXF1ZXN0LCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBkb2N1bWVudC5hbGwgPyB7IGNhY2hlOiBmYWxzZSB9IDogbnVsbDtcbiAgdGhpcy5zZW5kKHdlYk1ldGhvZCwgcmVxdWVzdCwgb25TdWNjZXNzLCBvbkVycm9yLCBvcHRpb25zKTtcbn07XG5cbi8vU2VuZHMgYSBIVFRQICdQT1NUJyB3aXRoIGZvcm0gZGF0YSByZXF1ZXN0IGFzIEpTT04gQHJlcXVpcmVzIGpRdWVyeVxuSnNvblNlcnZpY2VDbGllbnQucHJvdG90eXBlLnBvc3RGb3JtRGF0YVRvU2VydmljZSA9IGZ1bmN0aW9uICh3ZWJNZXRob2QsIHJlcXVlc3QsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICB0aGlzLnNlbmQod2ViTWV0aG9kLCByZXF1ZXN0LCBvblN1Y2Nlc3MsIG9uRXJyb3IsIHsgdHlwZTogXCJQT1NUXCIsIHByb2Nlc3NEYXRhOiBmYWxzZSwgY29udGVudFR5cGU6IGZhbHNlIH0sIHRydWUpO1xufTtcblxuLy9TZW5kcyBhIEhUVFAgJ1BPU1QnIHJlcXVlc3QgYXMgSlNPTiBAcmVxdWlyZXMgalF1ZXJ5XG5Kc29uU2VydmljZUNsaWVudC5wcm90b3R5cGUucG9zdFRvU2VydmljZSA9IGZ1bmN0aW9uICh3ZWJNZXRob2QsIHJlcXVlc3QsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICB2YXIganNvblJlcXVlc3QgPSBKc29uU2VydmljZUNsaWVudC50b0pTT04ocmVxdWVzdCk7XG4gIHRoaXMuc2VuZCh3ZWJNZXRob2QsIGpzb25SZXF1ZXN0LCBvblN1Y2Nlc3MsIG9uRXJyb3IsIHsgdHlwZTogXCJQT1NUXCIsIHByb2Nlc3NEYXRhOiBmYWxzZSwgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiIH0pO1xufTtcblxuLy9TZW5kcyBhIEhUVFAgJ1BVVCcgcmVxdWVzdCBhcyBKU09OIEByZXF1aXJlcyBqUXVlcnlcbkpzb25TZXJ2aWNlQ2xpZW50LnByb3RvdHlwZS5wdXRUb1NlcnZpY2UgPSBmdW5jdGlvbiAod2ViTWV0aG9kLCByZXF1ZXN0LCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgdmFyIGpzb25SZXF1ZXN0ID0gSnNvblNlcnZpY2VDbGllbnQudG9KU09OKHJlcXVlc3QpO1xuICB0aGlzLnNlbmQod2ViTWV0aG9kLCBqc29uUmVxdWVzdCwgb25TdWNjZXNzLCBvbkVycm9yLCB7IHR5cGU6IFwiUFVUXCIsIHByb2Nlc3NEYXRhOiBmYWxzZSwgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiIH0pO1xufTtcblxuLy9TZW5kcyBhIEhUVFAgJ0RFTEVURScgcmVxdWVzdCBhcyBKU09OIEByZXF1aXJlcyBqUXVlcnlcbkpzb25TZXJ2aWNlQ2xpZW50LnByb3RvdHlwZS5kZWxldGVGcm9tU2VydmljZSA9IGZ1bmN0aW9uICh3ZWJNZXRob2QsIHJlcXVlc3QsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICB2YXIganNvblJlcXVlc3QgPSBKc29uU2VydmljZUNsaWVudC50b0pTT04ocmVxdWVzdCk7XG4gIHRoaXMuc2VuZCh3ZWJNZXRob2QsIGpzb25SZXF1ZXN0LCBvblN1Y2Nlc3MsIG9uRXJyb3IsIHsgdHlwZTogXCJERUxFVEVcIiwgcHJvY2Vzc0RhdGE6IGZhbHNlLCBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIgfSk7XG59O1xuXG5Kc29uU2VydmljZUNsaWVudC5pZCA9IDA7XG5Kc29uU2VydmljZUNsaWVudC5vbkVycm9yID0gZnVuY3Rpb24gKCkgeyB9O1xuSnNvblNlcnZpY2VDbGllbnQub25TdWNjZXNzID0gZnVuY3Rpb24gKCkgeyB9O1xuSnNvblNlcnZpY2VDbGllbnQucGFyc2VSZXNwb25zZVN0YXR1c18gPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gIGlmICghc3RhdHVzKSByZXR1cm4geyBpc1N1Y2Nlc3M6IHRydWUgfTtcblxuICB2YXIgcmVzdWx0ID1cbiAge1xuICAgIGlzU3VjY2Vzczogc3RhdHVzLkVycm9yQ29kZSA9PT0gdW5kZWZpbmVkIHx8IHN0YXR1cy5FcnJvckNvZGUgPT09IG51bGwsXG4gICAgZXJyb3JDb2RlOiBzdGF0dXMuRXJyb3JDb2RlLFxuICAgIG1lc3NhZ2U6IHN0YXR1cy5NZXNzYWdlLFxuICAgIGVycm9yTWVzc2FnZTogc3RhdHVzLkVycm9yTWVzc2FnZSxcbiAgICBzdGFja1RyYWNlOiBzdGF0dXMuU3RhY2tUcmFjZSxcbiAgICBmaWVsZEVycm9yczogW10sXG4gICAgZmllbGRFcnJvck1hcDoge31cbiAgfTtcblxuICBpZiAoc3RhdHVzLkZpZWxkRXJyb3JzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0YXR1cy5GaWVsZEVycm9ycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGVyciA9IHN0YXR1cy5GaWVsZEVycm9yc1tpXTtcbiAgICAgIHZhciBlcnJvciA9IHsgZXJyb3JDb2RlOiBlcnIuRXJyb3JDb2RlLCBmaWVsZE5hbWU6IGVyci5GaWVsZE5hbWUsIGVycm9yTWVzc2FnZTogZXJyLkVycm9yTWVzc2FnZSB8fCAnJyB9O1xuICAgICAgcmVzdWx0LmZpZWxkRXJyb3JzLnB1c2goZXJyb3IpO1xuXG4gICAgICBpZiAoZXJyb3IuZmllbGROYW1lKSB7XG4gICAgICAgIHJlc3VsdC5maWVsZEVycm9yTWFwW2Vycm9yLmZpZWxkTmFtZV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5Kc29uU2VydmljZUNsaWVudC50b0pzb25EYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgdmFyIGpzRGF0ZSA9IGlzLkRhdGUoZGF0ZSkgPyBkYXRlIDogbmV3IERhdGUoZGF0ZSk7XG59XG4vL0FkYXB0ZXIgbWV0aG9kcyB1c2UganF1ZXJ5IG9yIGdvb2dsZSBjbG9zdXJlIGxpYnJhcnkgaWYgYXZhaWxhYmxlXG5Kc29uU2VydmljZUNsaWVudC5wYXJzZUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xuICBpZiAodHlwZW9mIChKU09OKSA9PSAnb2JqZWN0JyAmJiBKU09OLnBhcnNlKVxuICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICBpZiAoJCAmJiAkLnBhcnNlSlNPTilcbiAgICByZXR1cm4gJC5wYXJzZUpTT04oanNvbik7XG4gIGlmIChnb29nICYmIGdvb2cuanNvbilcbiAgICByZXR1cm4gZ29vZy5qc29uLnBhcnNlKGpzb24pO1xuICB0aHJvdyBcIm5vIGpzb24gcGFyc2VyIGZvdW5kXCI7XG59XG5Kc29uU2VydmljZUNsaWVudC50b0pTT04gPSBmdW5jdGlvbiAobykge1xuICBpZiAodHlwZW9mIChKU09OKSA9PSAnb2JqZWN0JyAmJiBKU09OLnN0cmluZ2lmeSlcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobyk7XG4gIGlmICgkICYmICQudG9KU09OKVxuICAgIHJldHVybiAkLnRvSlNPTihvKTtcbiAgaWYgKGdvb2cgJiYgZ29vZy5qc29uKVxuICAgIHJldHVybiBnb29nLmpzb24uc2VyaWFsaXplKG8pO1xuICB0aHJvdyBcIm5vIGpzb24gc2VyaWFsaXplciBmb3VuZFwiO1xufVxuSnNvblNlcnZpY2VDbGllbnQuYWpheCA9IGZ1bmN0aW9uIChhamF4T3B0aW9ucykge1xuICBpZiAoJCAmJiAkLmFqYXgpXG4gICAgcmV0dXJuICQuYWpheChhamF4T3B0aW9ucyk7XG4gIHRocm93IFwibm8gYWpheCBwcm92aWRlciBmb3VuZFwiO1xufVxuXG4vKiBEZXBlbmRlbnQgc25pcHBldHMgYmVsb3cgZnJvbSBBamF4U3RhY2suIFRPRE86IHJlcGxhY2Ugd2l0aCB1dGlscyBpbiBHb29nbGUgQ2xvc3VyZSBMaWJyYXJ5ICovXG52YXIgaXMgPSB7XG4gIE51bGw6IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGEgPT09IG51bGw7XG4gIH0sXG4gIFVuZGVmaW5lZDogZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gYSA9PT0gdW5kZWZpbmVkO1xuICB9LFxuICBFbXB0eTogZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gKGEgPT09IG51bGwgfHwgYSA9PT0gdW5kZWZpbmVkIHx8IGEgPT09IFwiXCIpO1xuICB9LFxuICBGdW5jdGlvbjogZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gKHR5cGVvZiAoYSkgPT09ICdmdW5jdGlvbicpID8gYS5jb25zdHJ1Y3Rvci50b1N0cmluZygpLm1hdGNoKC9GdW5jdGlvbi8pICE9PSBudWxsIDogZmFsc2U7XG4gIH0sXG4gIFN0cmluZzogZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYSA9PT0gbnVsbCB8fCBhID09PSB1bmRlZmluZWQgfHwgYS50eXBlKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICh0eXBlb2YgKGEpID09PSAnc3RyaW5nJykgPyB0cnVlIDogKHR5cGVvZiAoYSkgPT09ICdvYmplY3QnKSA/IGEuY29uc3RydWN0b3IudG9TdHJpbmcoKS5tYXRjaCgvc3RyaW5nL2kpICE9PSBudWxsIDogZmFsc2U7XG4gIH0sXG4gIEFycmF5OiBmdW5jdGlvbiAoYSkge1xuICAgIGlmIChpcy5FbXB0eShhKSB8fCBhLnR5cGUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKHR5cGVvZiAoYSkgPT09ICdvYmplY3QnKSA/IGEuY29uc3RydWN0b3IudG9TdHJpbmcoKS5tYXRjaCgvYXJyYXkvaSkgIT09IG51bGwgfHwgYS5sZW5ndGggIT09IHVuZGVmaW5lZCA6IGZhbHNlO1xuICB9LFxuICBCb29sZWFuOiBmdW5jdGlvbiAoYSkge1xuICAgIGlmIChpcy5FbXB0eShhKSB8fCBhLnR5cGUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKHR5cGVvZiAoYSkgPT09ICdib29sZWFuJykgPyB0cnVlIDogKHR5cGVvZiAoYSkgPT09ICdvYmplY3QnKSA/IGEuY29uc3RydWN0b3IudG9TdHJpbmcoKS5tYXRjaCgvYm9vbGVhbi9pKSAhPT0gbnVsbCA6IGZhbHNlO1xuICB9LFxuICBEYXRlOiBmdW5jdGlvbiAoYSkge1xuICAgIGlmIChpcy5FbXB0eShhKSB8fCBhLnR5cGUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gKHR5cGVvZiAoYSkgPT09ICdkYXRlJykgPyB0cnVlIDogKHR5cGVvZiAoYSkgPT09ICdvYmplY3QnKSA/IGEuY29uc3RydWN0b3IudG9TdHJpbmcoKS5tYXRjaCgvZGF0ZS9pKSAhPT0gbnVsbCA6IGZhbHNlO1xuICB9LFxuICBOdW1iZXI6IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKGlzLkVtcHR5KGEpIHx8IGEudHlwZSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAodHlwZW9mIChhKSA9PT0gJ251bWJlcicpID8gdHJ1ZSA6ICh0eXBlb2YgKGEpID09PSAnb2JqZWN0JykgPyBhLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkubWF0Y2goL051bWJlci8pICE9PSBudWxsIDogZmFsc2U7XG4gIH0sXG4gIFZhbHVlVHlwZTogZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoaXMuRW1wdHkoYSkgfHwgYS50eXBlKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGlzLlN0cmluZyhhKSB8fCBpcy5EYXRlKGEpIHx8IGlzLk51bWJlcihhKSB8fCBpcy5Cb29sZWFuKGEpO1xuICB9XG59O1xuXG4vL1N0cmluZyBVdGlsc1xudmFyIFMgPSB7fTtcblMucnRyaW0gPSBmdW5jdGlvbiAoc3RyLCBjaGFycykge1xuICBjaGFycyA9IGNoYXJzIHx8IFwiXFxcXHNcIjtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbXCIgKyBjaGFycyArIFwiXSskXCIsIFwiZ1wiKSwgXCJcIik7XG59O1xuUy50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMCB8fCAhYXJndW1lbnRzWzBdKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcyA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGlmIChzKSBzICs9IFwiL1wiO1xuXG4gICAgaWYgKGlzLlN0cmluZyhhcmcpKSBzICs9IGFyZztcbiAgICBlbHNlIGlmIChpcy5WYWx1ZVR5cGUoYXJnKSkgcyArPSBhcmcudG9TdHJpbmcoKTtcbiAgICBlbHNlIGlmIChpcy5BcnJheShhcmcpKSBzICs9ICdbJyArIEEuam9pbihhcmcsIFwiLFwiKSArICddJztcbiAgICBlbHNlIHtcbiAgICAgIHZhciBvID0gXCJcIjtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gYXJnKSB7XG4gICAgICAgIGlmIChvKSBvICs9IFwiLFwiO1xuICAgICAgICBvICs9IG5hbWUgKyBcIjpcIiArIFMuc2FmZVN0cmluZyhhcmdbbmFtZV0pO1xuICAgICAgfVxuICAgICAgcyArPSAneycgKyBvICsgJ30nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcztcbn07XG5TLnNhZmVTdHJpbmcgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmICghc3RyKSByZXR1cm4gc3RyO1xuICBpZiAoUy5jb250YWluc0FueShzdHIsIFsnWycsICddJywgJ3snLCAnfScsICcsJ10pKSB7XG4gICAgcmV0dXJuICdcIicgKyBzdHIgKyAnXCInO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuUy5jb250YWluc0FueSA9IGZ1bmN0aW9uIChzdHIsIHRlc3RzKSB7XG4gIGlmICghaXMuU3RyaW5nKHN0cikpIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRlc3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKHN0ci5pbmRleE9mKHRlc3RzW2ldKSAhPSAtMSkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblMuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uICh0ZXh0LCBzdGFydHNXaXRoKSB7XG4gIGlmICghdGV4dCB8fCAhc3RhcnRzV2l0aCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdGV4dC5sYXN0SW5kZXhPZihzdGFydHNXaXRoLCAwKSA9PSAwO1xufTtcblMucGFkID0gZnVuY3Rpb24gKHRleHQsIHBhZExlbiwgcGFkQ2hhciwgcnBhZCkge1xuICB2YXIgcGFkQ2hhciA9IHBhZENoYXIgfHwgKHJwYWQgPyBcIiBcIiA6IFwiMFwiKTtcbiAgdGV4dCA9IHRleHQudG9TdHJpbmcoKTtcbiAgd2hpbGUgKHRleHQubGVuZ3RoIDwgcGFkTGVuKSB7XG4gICAgdGV4dCA9IHJwYWRcbiAgICAgID8gdGV4dCArIHBhZENoYXJcbiAgICAgIDogcGFkQ2hhciArIHRleHQ7XG4gIH1cbiAgcmV0dXJuIHRleHQ7XG59XG5TLnBhZExlZnQgPSBmdW5jdGlvbiAodGV4dCwgcGFkTGVuLCBwYWRDaGFyKSB7XG4gIHJldHVybiBTLnBhZCh0ZXh0LCBwYWRMZW4sIHBhZENoYXIsIGZhbHNlKTtcbn1cblMucGFkUmlnaHQgPSBmdW5jdGlvbiAodGV4dCwgcGFkTGVuLCBwYWRDaGFyKSB7XG4gIHJldHVybiBTLnBhZCh0ZXh0LCBwYWRMZW4sIHBhZENoYXIsIHRydWUpO1xufVxuUy5scGFkID0gUy5wYWRMZWZ0O1xuUy5ycGFkID0gUy5wYWRSaWdodDtcblxuLy9BcnJheSBVdGlsc1xudmFyIEEgPSB7fTtcbkEuZWFjaCA9IGZ1bmN0aW9uIChhcnJheSwgZm4pIHtcbiAgaWYgKCFhcnJheSkgcmV0dXJuO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspXG4gICAgZm4oYXJyYXlbaV0pO1xufTtcbkEuY29udmVydEFsbCA9IGZ1bmN0aW9uIChhcnJheSwgY29udmVydEZuKSB7XG4gIHZhciB0byA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspXG4gICAgdG9baV0gPSBjb252ZXJ0Rm4oYXJyYXlbaV0pO1xuICByZXR1cm4gdG87XG59O1xuQS5qb2luID0gZnVuY3Rpb24gKGFycmF5LCBvbikge1xuICB2YXIgcyA9IFwiXCI7XG4gIG9uID0gb24gfHwgXCIsXCI7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChzKSBzICs9IG9uO1xuICAgIHMgKz0gYXJyYXlbaV07XG4gIH1cbiAgcmV0dXJuIHM7XG59O1xuQS50b1RhYmxlID0gZnVuY3Rpb24gKGFycmF5LCB0YWJsZUZvcm1hdEZucykge1xuICB0YWJsZUZvcm1hdEZucyA9IHRhYmxlRm9ybWF0Rm5zIHx8IHt9O1xuICB2YXIgY29scyA9IFtdLCBzYiA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgb2JqID0gYXJyYXlbaV07XG4gICAgaWYgKCFvYmopIGNvbnRpbnVlO1xuICAgIGlmIChpID09IDApIHtcbiAgICAgIHNiLnB1c2goXCI8dGFibGU+PHRoZWFkPjx0cj5cIik7XG4gICAgICBmb3IgKHZhciBrIGluIG9iaikge1xuICAgICAgICBjb2xzLnB1c2goayk7XG4gICAgICAgIHNiLnB1c2goXCI8dGg+XCIgKyBrICsgXCI8L3RoPlwiKTtcbiAgICAgIH1cbiAgICAgIHNiLnB1c2goXCI8L3RyPjwvdGhlYWQ+PHRib2R5PlwiKTtcbiAgICB9XG4gICAgc2IucHVzaChcIjx0cj5cIik7XG4gICAgZm9yICh2YXIgaiA9IDAsIGNvbHNMZW4gPSBjb2xzLmxlbmd0aDsgaiA8IGNvbHNMZW47IGorKykge1xuICAgICAgdmFyIGsgPSBjb2xzW2pdO1xuICAgICAgdmFyIGRhdGEgPSB0YWJsZUZvcm1hdEZuc1trXSA/IHRhYmxlRm9ybWF0Rm5zW2tdKG9ialtrXSkgOiBEdG8uZm9ybWF0VmFsdWUob2JqW2tdKTtcblxuICAgICAgc2IucHVzaChcIjx0ZD5cIiArIGRhdGEgKyBcIjwvdGQ+XCIpO1xuICAgIH1cbiAgICBzYi5wdXNoKFwiPC90cj5cIik7XG4gIH1cbiAgc2IucHVzaChcIjwvdGJvZHk+PC90YWJsZT5cIik7XG4gIHJldHVybiBzYi5qb2luKCcnKTtcbn1cblxuLy9PYmplY3QgVXRpbHNcbnZhciBPID0ge307XG5PLmtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn07XG5cbi8vUGF0aCBVdGlsc1xudmFyIFBhdGggPSB7fTtcblBhdGguY29tYmluZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBhdGhzID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChwYXRocy5sZW5ndGggPiAwKVxuICAgICAgcGF0aHMgKz0gXCIvXCI7XG5cbiAgICBwYXRocyArPSBTLnJ0cmltKGFyZ3VtZW50c1tpXSwgJy8nKTtcbiAgfVxuICByZXR1cm4gcGF0aHM7XG59O1xuUGF0aC5nZXRGaXJzdEFyZyA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBwYXRoLnNwbGl0KCcvJylbMF07XG59O1xuUGF0aC5nZXRGaXJzdFZhbHVlID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHBhdGguaW5kZXhPZignLycpID09IC0xKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHBhdGguc3Vic3RyKHBhdGguaW5kZXhPZignLycpICsgMSk7XG59O1xuUGF0aC5nZXRBcmdzID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKTtcbn07XG5cbnZhciBVcm4gPSB7fTtcblVybi50b0lkID0gZnVuY3Rpb24gKHVybikge1xuICByZXR1cm4gdXJuLnJlcGxhY2UoLzovZywgJ18nKTtcbn07XG5Vcm4uZ2V0SWRWYWx1ZSA9IGZ1bmN0aW9uICh1cm4pIHtcbiAgcmV0dXJuIHVybi5zcGxpdCgnOicpWzJdO1xufTtcblVybi5mcm9tSWQgPSBmdW5jdGlvbiAodXJuKSB7XG4gIHJldHVybiB1cm4ucmVwbGFjZSgvXy9nLCAnOicpO1xufTtcblxudmFyIER0byA9IHt9O1xuRHRvLnRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgcmV0dXJuIGlzLkFycmF5KGFycmF5KVxuICAgICAgPyBTLnRvU3RyaW5nKGFycmF5KVxuICAgICAgOiBcIltcIiArIFMudG9TdHJpbmcoYXJyYXkpICsgXCJdXCI7XG59O1xuRHRvLnRvVXRjRGF0ZSA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKClcbiAgICAgICsgJy0nICsgUy5scGFkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsIDIpXG4gICAgICArICctJyArIFMubHBhZChkYXRlLmdldFVUQ0RhdGUoKSwgMilcbiAgICAgICsgJ1QnICsgUy5scGFkKGRhdGUuZ2V0VVRDSG91cnMoKSwgMilcbiAgICAgICsgJzonICsgUy5scGFkKGRhdGUuZ2V0VVRDTWludXRlcygpLCAyKVxuICAgICAgKyAnOicgKyBTLmxwYWQoZGF0ZS5nZXRVVENTZWNvbmRzKCksIDIpXG4gICAgICArICdaJztcbn07XG5EdG8uaXNKc29uRGF0ZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgaWYgKCFpcy5TdHJpbmcoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gUy5zdGFydHNXaXRoKHN0ciwgRHRvLldjZkRhdGVQcmVmaXgpO1xufTtcbkR0by5XY2ZEYXRlUHJlZml4ID0gXCJcXC9EYXRlKFwiO1xuRHRvLnRvSnNvbkRhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICBkYXRlID0gRHRvLnBhcnNlSnNvbkRhdGUoZGF0ZSk7XG4gIHJldHVybiBEdG8uV2NmRGF0ZVByZWZpeCArIGRhdGUuZ2V0VGltZSgpICsgXCIrMDAwMClcXC9cIjtcbn07XG5EdG8ucGFyc2VKc29uRGF0ZSA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gIHJldHVybiBpcy5EYXRlKGRhdGUpXG4gICAgICA/IGRhdGVcbiAgICAgIDogKFMuc3RhcnRzV2l0aChkYXRlLCBEdG8uV2NmRGF0ZVByZWZpeClcbiAgICAgICAgICA/IG5ldyBEYXRlKHBhcnNlSW50KGRhdGUuc3Vic3RyaW5nKER0by5XY2ZEYXRlUHJlZml4Lmxlbmd0aCwgZGF0ZS5sZW5ndGggLSAyKSkpXG4gICAgICAgICAgOiBuZXcgRGF0ZShkYXRlKSk7XG59O1xuRHRvLmZvcm1hdERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAvL0lFIG5lZWRzICcvJyBzZXBlcmF0b3JzXG4gIGRhdGUgPSBEdG8ucGFyc2VKc29uRGF0ZShkYXRlKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKVxuICAgICAgKyAnLycgKyBTLmxwYWQoZGF0ZS5nZXRVVENNb250aCgpICsgMSwgMilcbiAgICAgICsgJy8nICsgUy5scGFkKGRhdGUuZ2V0VVRDRGF0ZSgpLCAyKTtcbn07XG5EdG8uZm9ybWF0VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKER0by5pc0pzb25EYXRlKHZhbHVlKSkgcmV0dXJuIER0by5mb3JtYXREYXRlKHZhbHVlKTtcbiAgaWYgKGlzLkVtcHR5KHZhbHVlKSkgcmV0dXJuIFwiXCI7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
